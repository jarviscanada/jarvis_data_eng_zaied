package ca.jrvs.apps.trading.controller;

import ca.jrvs.apps.trading.model.domain.Account;
import ca.jrvs.apps.trading.model.domain.Trader;
import ca.jrvs.apps.trading.model.view.TraderAccountView;
import ca.jrvs.apps.trading.service.TraderAccountService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.sql.Date;

@Api(value = "Trader", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
@Controller
@RequestMapping("/trader")
public class TraderAccountController {

    private TraderAccountService traderAccountService;

    @Autowired
    public TraderAccountController(TraderAccountService traderAccountService) {
        this.traderAccountService = traderAccountService;
    }

    @ApiOperation(value = "Create a trader and an account", notes = "TraderId and AccountId are autogenerated by" +
            "database and they must be identical. Each trader has only one account")
    @ResponseStatus(HttpStatus.CREATED)
    @ResponseBody
    @PostMapping(path = "/firstname/{firstname}/lastname/{lastname}/dob/{dob}/country/{country}/email/{email}",
            produces = {MediaType.APPLICATION_JSON_VALUE})
    public TraderAccountView createTrader(@PathVariable String firstname, @PathVariable String lastname,
                                          @PathVariable @DateTimeFormat(pattern = "yyyy-mm-dd") String dob,
                                          @PathVariable String country, @PathVariable String email) {
        try {

            Trader trader = new Trader();
            trader.setFirstName(firstname);
            trader.setLastName(lastname);
            trader.setDob(Date.valueOf(dob));
            trader.setCountry(country);
            trader.setEmail(email);
            return traderAccountService.createTraderAndAccount(trader);
        } catch (Exception ex) {
            throw ResponseExceptionUtil.getResponseException(ex);
        }
    }

    @ApiOperation(value = "Create a trader and an account with DTO", notes = "TraderId and AccountId are autogenerated by" +
            "database and they must be identical. Each trader has only one account")
    @ResponseStatus(HttpStatus.CREATED)
    @ResponseBody
    @PostMapping(path = "/", produces = {MediaType.APPLICATION_JSON_UTF8_VALUE})
    public TraderAccountView createTrader(@RequestBody Trader trader) {
        try {
            return traderAccountService.createTraderAndAccount(trader);
        } catch (Exception ex) {
            throw ResponseExceptionUtil.getResponseException(ex);
        }
    }

    @ApiOperation(value = "Delete a trader", notes = "Delete a trader iff its account balance is zero " +
            "and no open positions, also delete corresponding account and security orders")
    @ApiResponses({@ApiResponse(code = 404, message = "unable to delete trader")})
    @ResponseStatus(HttpStatus.OK)
    @ResponseBody
    @DeleteMapping(path = "/traderId/{traderId}")
    public void deleteTrader(@PathVariable Integer traderId) {
        try {
            traderAccountService.deleteTraderById(traderId);
        } catch (Exception ex) {
            throw ResponseExceptionUtil.getResponseException(ex);
        }
    }

    @ApiOperation(value = "Deposit a fund", notes = "deposit fund to the account corresponding to the trader id")
    @ApiResponses({@ApiResponse(code = 404, message = "traderId is not found"),
            @ApiResponse(code = 400, message = "unable to deposit due to user input")})
    @ResponseStatus(HttpStatus.OK)
    @ResponseBody
    @PutMapping(path = "/deposit/traderId/{traderId}/amount/{amount}")
    public Account depositFund(@PathVariable Integer traderId, @PathVariable Double amount) {
        try {
            return traderAccountService.deposit(traderId, amount);
        } catch (Exception ex) {
            throw ResponseExceptionUtil.getResponseException(ex);
        }

    }

    @ApiOperation(value = "Withdraw a fund", notes = "Withdraw fund to the account corresponding to the trader id")
    @ApiResponses({@ApiResponse(code = 404, message = "traderId is not found"),
            @ApiResponse(code = 400, message = "unable to withdraw due to user input")})
    @ResponseStatus(HttpStatus.OK)
    @ResponseBody
    @PutMapping(path = "/withdraw/traderId/{traderId}/amount/{amount}")
    public Account withdrawFund(@PathVariable Integer traderId, @PathVariable Double amount) {
        try {
            return traderAccountService.withdraw(traderId, amount);
        } catch (Exception ex) {
            throw ResponseExceptionUtil.getResponseException(ex);
        }

    }


}
